// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @db.VarChar(255)
  email        String    @unique @db.VarChar(320)
  password     String    @db.VarChar(255)
  profile      String?   @db.Text
  refreshToken String?   @db.VarChar(255)
  workspaces   WorkspaceMember[]
  cards        CardMember[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WorkspaceMember{
  id          String     @id @default(uuid()) @db.Uuid
  userId      String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
  workspaceId String     @db.Uuid
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Workspace{
  id        String    @id @default(uuid()) @db.Uuid
  title     String    @db.VarChar(255)
  members   WorkspaceMember[]
  boards    Board[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Board{
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.VarChar(255)
  workspaceId String    @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  lists       List[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model List {
  id        String   @id @default(uuid()) @db.Uuid
  title     String   @db.VarChar(255)
  boardId   String   @db.Uuid
  board     Board    @relation(fields: [boardId], references: [id])
  cards     Card[]
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String   @id
  title       String   @db.VarChar(255)
  description String?  @db.Text
  listId      String   @db.Uuid
  list        List     @relation(fields: [listId], references: [id])
  position    Int
  members     CardMember[]
  status      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CardMember {
  id      String @id @default(uuid()) @db.Uuid
  cardId  String
  card    Card   @relation(fields: [cardId], references: [id])
  userId  String @db.Uuid
  user    User   @relation(fields: [userId], references: [id])
}